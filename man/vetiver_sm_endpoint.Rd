% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sagemaker.R
\name{vetiver_sm_endpoint}
\alias{vetiver_sm_endpoint}
\title{Create an Amazon SageMaker model endpoint}
\usage{
vetiver_sm_endpoint(
  model_name,
  endpoint_name = NULL,
  instance_type = NULL,
  initial_instance_count = 1,
  accelerator_type = NULL,
  tags = list(),
  kms_key = NULL,
  data_capture_config = list(),
  volume_size = NULL,
  model_data_download_timeout = NULL,
  wait = TRUE
)
}
\arguments{
\item{model_name}{The Amazon SageMaker model name to be deployed.}

\item{endpoint_name}{The name to use for the Amazon SageMaker model endpoint
to be created, if to be different from \code{model_name}.}

\item{instance_type}{Type of EC2 instance to use; see
\href{https://aws.amazon.com/sagemaker/pricing/}{Amazon SageMaker pricing}.}

\item{initial_instance_count}{The initial number of instances to run
in the endpoint.}

\item{accelerator_type}{Type of Elastic Inference accelerator to
attach to an endpoint for model loading and inference, for
example, \code{"ml.eia1.medium"}.}

\item{tags}{A list of tags for labeling the Amazon SageMaker model endpoint.}

\item{kms_key}{The ARN of the KMS key used to encrypt the data on the
storage volume attached to the instance hosting the endpoint.}

\item{data_capture_config}{A list for configuration to control how Amazon
SageMaker captures inference data.}

\item{volume_size}{The size, in GB, of the ML storage volume attached to
the individual inference instance associated with the production variant.
Currently only Amazon EBS gp2 storage volumes are supported.}

\item{model_data_download_timeout}{The timeout value, in seconds, to download
and extract model data from Amazon S3.}

\item{wait}{A logical for whether to wait for the endpoint to be deployed.
Defaults to \code{TRUE}.}
}
\value{
A new \code{\link[=vetiver_endpoint_sagemaker]{vetiver_endpoint_sagemaker()}} object.
}
\description{
Use the function \code{\link[=vetiver_deploy_sagemaker]{vetiver_deploy_sagemaker()}} for basic deployment on
SageMaker, or these three functions together for more advanced use cases:
\itemize{
\item \code{\link[=vetiver_sm_build]{vetiver_sm_build()}} generates and builds a Docker image on SageMaker for
a vetiver model
\item \code{\link[=vetiver_sm_model]{vetiver_sm_model()}} creates an Amazon SageMaker model
\item \code{vetiver_sm_endpoint()} deploys an Amazon SageMaker model endpoint
}
}
\examples{
if (FALSE) {
library(pins)
b <- board_s3(bucket = "my-existing-bucket")
cars_lm <- lm(mpg ~ ., data = mtcars)
v <- vetiver_model(cars_lm, "cars_linear")
vetiver_pin_write(b, v)

new_image_uri <- vetiver_sm_build(
    board = b,
    name = "cars_linear",
    predict_args = list(type = "class", debug = TRUE)
)

model_name <- vetiver_sm_model(new_image_uri, tags = list("fuel-efficiency"))
vetiver_sm_endpoint(model_name)
}
}
\seealso{
\code{\link[=vetiver_deploy_sagemaker]{vetiver_deploy_sagemaker()}}, \code{\link[=vetiver_sm_build]{vetiver_sm_build()}}, \code{\link[=vetiver_sm_endpoint]{vetiver_sm_endpoint()}}
}
